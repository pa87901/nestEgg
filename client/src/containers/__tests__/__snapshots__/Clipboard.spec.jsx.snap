// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Clipboard Clipboard snapshot has not changed 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Clipboard
    handleSetTransactions={[Function]}
    store={Array []}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Segment>
          <h2>
            Transactions
          </h2>
          <Connect(Jotter) />
        </Segment>,
        <Segment
          className="portfolioButtonRow"
        >
          <Connect(Ticket) />
          <Button
            as="button"
            basic={true}
            color={null}
          >
            Delete
          </Button>
        </Segment>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <h2>
              Transactions
            </h2>,
            <Connect(Jotter) />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Transactions",
            },
            "ref": null,
            "rendered": "Transactions",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Connect(Ticket) />,
            <Button
              as="button"
              basic={true}
              color={null}
            >
              Delete
            </Button>,
          ],
          "className": "portfolioButtonRow",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": "button",
              "basic": true,
              "children": "Delete",
              "color": null,
            },
            "ref": null,
            "rendered": "Delete",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Segment>
            <h2>
              Transactions
            </h2>
            <Connect(Jotter) />
          </Segment>,
          <Segment
            className="portfolioButtonRow"
          >
            <Connect(Ticket) />
            <Button
              as="button"
              basic={true}
              color={null}
            >
              Delete
            </Button>
          </Segment>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <h2>
                Transactions
              </h2>,
              <Connect(Jotter) />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Transactions",
              },
              "ref": null,
              "rendered": "Transactions",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Connect(Ticket) />,
              <Button
                as="button"
                basic={true}
                color={null}
              >
                Delete
              </Button>,
            ],
            "className": "portfolioButtonRow",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "button",
                "basic": true,
                "children": "Delete",
                "color": null,
              },
              "ref": null,
              "rendered": "Delete",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
